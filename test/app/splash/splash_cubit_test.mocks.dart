// Mocks generated by Mockito 5.0.7 from annotations
// in todo_app/test/app/splash/splash_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/src/transition.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/app/auth/auth_cubit.dart' as _i7;
import 'package:todo_app/app/auth/auth_state.dart' as _i3;
import 'package:todo_app/domain/core/result.dart' as _i2;
import 'package:todo_app/domain/entities/user.dart' as _i6;
import 'package:todo_app/domain/usecases/user/get_authenticated_user.dart'
    as _i5;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeResult<T> extends _i1.Fake implements _i2.Result<T> {}

class _FakeAuthState extends _i1.Fake implements _i3.AuthState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [GetAuthenticatedUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAuthenticatedUser extends _i1.Mock
    implements _i5.GetAuthenticatedUser {
  MockGetAuthenticatedUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i6.User>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i2.Result<_i6.User>>.value(_FakeResult<_i6.User>()))
          as _i4.Future<_i2.Result<_i6.User>>);
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i7.AuthCubit {
  MockAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeAuthState()) as _i3.AuthState);
  @override
  _i4.Stream<_i3.AuthState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i3.AuthState>.empty()) as _i4.Stream<_i3.AuthState>);
  @override
  void setUser(_i6.User? user) =>
      super.noSuchMethod(Invocation.method(#setUser, [user]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.StreamSubscription<_i3.AuthState> listen(
          void Function(_i3.AuthState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i3.AuthState>())
          as _i4.StreamSubscription<_i3.AuthState>);
  @override
  void emit(_i3.AuthState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i8.Change<_i3.AuthState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
