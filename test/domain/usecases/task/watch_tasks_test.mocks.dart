// Mocks generated by Mockito 5.0.7 from annotations
// in todo_app/test/domain/usecases/task/watch_tasks_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/domain/core/result.dart' as _i2;
import 'package:todo_app/domain/entities/task.dart' as _i5;
import 'package:todo_app/domain/entities/unregistered_task.dart' as _i7;
import 'package:todo_app/domain/entities/user.dart' as _i6;
import 'package:todo_app/domain/repositories/task_repository.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeResult<T> extends _i1.Fake implements _i2.Result<T> {}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.Task>> registerTask(
          {_i6.User? user, _i7.UnregisteredTask? unregisteredTask}) =>
      (super.noSuchMethod(
              Invocation.method(#registerTask, [],
                  {#user: user, #unregisteredTask: unregisteredTask}),
              returnValue:
                  Future<_i2.Result<_i5.Task>>.value(_FakeResult<_i5.Task>()))
          as _i4.Future<_i2.Result<_i5.Task>>);
  @override
  _i4.Future<_i2.Result<void>> updateTask({_i6.User? user, _i5.Task? task}) =>
      (super.noSuchMethod(
              Invocation.method(#updateTask, [], {#user: user, #task: task}),
              returnValue: Future<_i2.Result<void>>.value(_FakeResult<void>()))
          as _i4.Future<_i2.Result<void>>);
  @override
  _i4.Future<_i2.Result<void>> deleteTask({_i6.User? user, _i5.Task? task}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteTask, [], {#user: user, #task: task}),
              returnValue: Future<_i2.Result<void>>.value(_FakeResult<void>()))
          as _i4.Future<_i2.Result<void>>);
  @override
  _i4.Stream<_i2.Result<List<_i5.Task>>> watchTasks({_i6.User? user}) =>
      (super.noSuchMethod(Invocation.method(#watchTasks, [], {#user: user}),
              returnValue: Stream<_i2.Result<List<_i5.Task>>>.empty())
          as _i4.Stream<_i2.Result<List<_i5.Task>>>);
}
